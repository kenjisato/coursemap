name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-rust:
    name: Rust Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run Rust tests
      run: make test-rust
    
    - name: Run Rust linting
      run: |
        cd core && cargo clippy -- -D warnings
        cd coursemap-rs && cargo clippy -- -D warnings

  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          coursemap-py/target
        key: ${{ runner.os }}-cargo-py-${{ hashFiles('coursemap-py/Cargo.lock') }}
    
    - name: Install Graphviz (for SVG tests)
      run: sudo apt-get update && sudo apt-get install -y graphviz
    
    - name: Run Python tests
      run: make test-python
    
    - name: Run Python linting
      run: |
        cd coursemap-py
        uv run --with black black --check python/
        uv run --with isort isort --check-only python/

  test-r:
    name: R Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: 'release'
    
    - name: Install R dependencies
      run: |
        Rscript --vanilla -e "install.packages(c('testthat', 'devtools'), repos='https://cran.rstudio.com/')"
    
    - name: Install Graphviz (for SVG tests)
      run: sudo apt-get update && sudo apt-get install -y graphviz
    
    - name: Run R tests
      run: make test-r

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-rust, test-python]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Graphviz
      run: sudo apt-get update && sudo apt-get install -y graphviz
    
    - name: Build all packages
      run: make build
    
    - name: Install Python package
      run: make install
    
    - name: Test CLI functionality
      run: |
        cd coursemap-rs
        cargo run -- ../test_docs --format dot --output test_integration.dot
        test -f test_integration.dot
        grep -q "digraph" test_integration.dot
    
    - name: Test Python package functionality
      run: |
        cd coursemap-py
        uv run python -c "
        import coursemap
        import tempfile
        import os
        
        # Test basic functionality
        cm = coursemap.CourseMap()
        config = cm.get_config()
        assert config['root_key'] == 'course-map'
        
        # Test with test_docs
        result = coursemap.generate_course_map('../test_docs', 'integration_test.dot', 'dot')
        assert os.path.exists('integration_test.dot')
        print('âœ… Python integration test passed')
        "

  build-check:
    name: Build Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Rust packages
      run: |
        cd core && cargo build --release
        cd coursemap-rs && cargo build --release
    
    - name: Install uv (Unix)
      if: runner.os != 'Windows'
      uses: astral-sh/setup-uv@v3
    
    - name: Install uv (Windows)
      if: runner.os == 'Windows'
      run: |
        powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
        echo "$env:USERPROFILE\.cargo\bin" >> $env:GITHUB_PATH
    
    - name: Build Python package
      run: |
        cd coursemap-py
        uv run maturin build --release
